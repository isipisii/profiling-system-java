/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.informationsystem;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author paulm
 */
public class RecordForm extends javax.swing.JInternalFrame {
    
    ArchiveRecords dr = new ArchiveRecords();
    public RecordForm() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
        updateTable();
        updateNumberOrResidents();
    }
    private boolean exist = false;
    private String sex;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_Data = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        jLabel4.setText("Age Category:");

        tbl_Data.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Baranggay", "Age", "Sex", "Age Category"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbl_Data);

        jButton1.setBackground(new java.awt.Color(0, 204, 204));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Shuffled", "Kids", "Teens", "Adults", "Senior" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Search a baranggay:");

        jButton2.setBackground(new java.awt.Color(102, 102, 255));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Search");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("jLabel2");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"Shuffle", "Male", "Female"}));
        jComboBox2.setAutoscrolls(true);
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Age Category:");

        jLabel5.setText("Sex Category:");

        jButton3.setBackground(new java.awt.Color(0, 153, 0));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("View Archive Records");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel5))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, 108, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(168, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addContainerGap(71, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       updateTable();
       updateNumberOrResidents();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

                int selectedIndex =  jComboBox1.getSelectedIndex();
                String ages = (String)  jComboBox1.getModel().getElementAt(selectedIndex);
//                "Shuffled", "Kids", "Teens", "Adults", "Senior"
                if(ages.equalsIgnoreCase("Shuffled")){
                    updateTable();
                }
                else if(ages.equalsIgnoreCase("Kids")){
                     showKids();
                }
                else if(ages.equalsIgnoreCase("Teens")){
                     showTeens();
                }
                else if(ages.equalsIgnoreCase("Adults")){
                     showAdults();
                }
                else if(ages.equalsIgnoreCase("Senior")){
                     showSenior();
                }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       showBaranggay();
       int numOfResidents = tbl_Data.getRowCount();
       jLabel2.setText("Number of residents in this baranggay: " + numOfResidents);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
                int selectedIndex =  jComboBox2.getSelectedIndex();
                sex = (String)  jComboBox2.getModel().getElementAt(selectedIndex);
                
                showMales();
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       dr.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed
   
   public void showMales(){
       try {
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            Connection connection = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/Alessandro/Informations.accdb");
            PreparedStatement pst = connection.prepareStatement("SELECT * FROM RegisteredData WHERE sex LIKE ? ORDER BY age ASC");
            pst.setString(1, sex+"%");
            
            ResultSet resultSet = pst.executeQuery();
            ResultSetMetaData rsmd = resultSet.getMetaData();
            int c = rsmd.getColumnCount();
            DefaultTableModel dftm = (DefaultTableModel)tbl_Data.getModel();
            dftm.setRowCount(0);
            
            while(resultSet.next()){
                
                Vector v2 = new Vector();
                
                for(int i = 0; i <= c; i++){
                    v2.add(resultSet.getInt("ID"));
                    v2.add(resultSet.getString("name"));
                    v2.add(resultSet.getString("baranggay"));
                    v2.add(resultSet.getInt("age"));
                    v2.add(resultSet.getString("sex"));
                    v2.add(resultSet.getString("agecat"));
                    
                }
               
                dftm.addRow(v2);
            }
            
            
          } catch (ClassNotFoundException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(this,ex);
             
        } catch (SQLException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,ex);
            System.out.println(ex);
        }
   } 
   public void showBaranggay() {
          try {
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            Connection connection = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/Alessandro/Informations.accdb");
            PreparedStatement pst = connection.prepareStatement("SELECT * FROM RegisteredData WHERE baranggay LIKE ? ORDER BY age ASC");
            pst.setString(1, jTextField1.getText()+"%");
            ResultSet resultSet = pst.executeQuery();
            
            ResultSetMetaData rsmd = resultSet.getMetaData();
            int c = rsmd.getColumnCount();
            DefaultTableModel dftm = (DefaultTableModel)tbl_Data.getModel();
            dftm.setRowCount(0);
            
            
            while(resultSet.next()){
                
                Vector v2 = new Vector();
                
                for(int i = 0; i <= c; i++){
                    v2.add(resultSet.getInt("ID"));
                    v2.add(resultSet.getString("name"));
                    v2.add(resultSet.getString("baranggay"));
                    v2.add(resultSet.getInt("age"));
                    v2.add(resultSet.getString("sex"));
                    v2.add(resultSet.getString("agecat"));
                    
                }
               
                dftm.addRow(v2);
            }
            
            
          } catch (ClassNotFoundException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(this,ex);
             
        } catch (SQLException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,ex);
            System.out.println(ex);
        }
        
    }
    
    
//    public void setDoesExist(boolean e){
//        exist = e;
//    }
//    public boolean doesExist(){
//        return exist;
//    }
//   
    public void updateNumberOrResidents(){
        int numOfResidents = tbl_Data.getRowCount();
        jLabel2.setText("Number of residents in all baranggay: " + numOfResidents);
    }
    public void updateTable(){
        int c;
        
        try {
            
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            Connection connection = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/Alessandro/Informations.accdb");
            PreparedStatement pst = connection.prepareStatement("select * from RegisteredData");
            ResultSet resultSet = pst.executeQuery();

            ResultSetMetaData rsmd = resultSet.getMetaData();
            c = rsmd.getColumnCount();
            DefaultTableModel dftm = (DefaultTableModel)tbl_Data.getModel();
            dftm.setRowCount(0);
            
            while(resultSet.next()){
                
                Vector v2 = new Vector();
                
                for(int i = 0; i <= c; i++){
                    v2.add(resultSet.getInt("ID"));
                    v2.add(resultSet.getString("name"));
                    v2.add(resultSet.getString("baranggay"));
                    v2.add(resultSet.getInt("age"));
                    v2.add(resultSet.getString("sex"));
                    v2.add(resultSet.getString("agecat"));
                    
                }
               
                dftm.addRow(v2);
            }
         
        }
         catch (ClassNotFoundException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(this,ex);
             
        } catch (SQLException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,ex);
            System.out.println(ex);
        }
        
    }

    public void showKids() { //will set the table of data if the age of persons are 12 below 
          try {
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            Connection connection = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/Alessandro/Informations.accdb");
            PreparedStatement pst = connection.prepareStatement("SELECT * FROM RegisteredData WHERE age <= 12 ORDER BY age ASC");
            
            ResultSet resultSet = pst.executeQuery();
            ResultSetMetaData rsmd = resultSet.getMetaData();
            int c = rsmd.getColumnCount();
            DefaultTableModel dftm = (DefaultTableModel)tbl_Data.getModel();
            dftm.setRowCount(0);
            
            while(resultSet.next()){
                
                Vector v2 = new Vector();
                
                for(int i = 0; i <= c; i++){
                    v2.add(resultSet.getInt("ID"));
                    v2.add(resultSet.getString("name"));
                    v2.add(resultSet.getString("baranggay"));
                    v2.add(resultSet.getInt("age"));
                    v2.add(resultSet.getString("sex"));
                     v2.add(resultSet.getString("agecat"));
                    
                }
               
                dftm.addRow(v2);
            }
            
            
          } catch (ClassNotFoundException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(this,ex);
             
        } catch (SQLException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,ex);
            System.out.println(ex);
        }
        
    }
    
    public void showTeens() { //will set the table of data if the age of persons are above 12 and below 18 
          try {
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            Connection connection = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/Alessandro/Informations.accdb");
             PreparedStatement pst = connection.prepareStatement("SELECT * FROM RegisteredData WHERE age > 12 AND age <= 17 ORDER BY age ASC");
            
            ResultSet resultSet = pst.executeQuery();
            ResultSetMetaData rsmd = resultSet.getMetaData();
            int c = rsmd.getColumnCount();
            DefaultTableModel dftm = (DefaultTableModel)tbl_Data.getModel();
            dftm.setRowCount(0);
            
            while(resultSet.next()){
                
                Vector v2 = new Vector();
                
                for(int i = 0; i <= c; i++){
                    v2.add(resultSet.getInt("ID"));
                    v2.add(resultSet.getString("name"));
                    v2.add(resultSet.getString("baranggay"));
                    v2.add(resultSet.getInt("age"));
                    v2.add(resultSet.getString("sex"));
                     v2.add(resultSet.getString("agecat"));
                    
                }
               
                dftm.addRow(v2);
            }
            
            
          } catch (ClassNotFoundException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(this,ex);
             
        } catch (SQLException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,ex);
            System.out.println(ex);
        }
        
    }
    
    public void showAdults() { //will set the table of data if the age of persons are above 12 and below 18 
          try {
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            Connection connection = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/Alessandro/Informations.accdb");
            PreparedStatement pst = connection.prepareStatement("SELECT * FROM RegisteredData WHERE age >= 18 AND age <= 59 ORDER BY age ASC");
            
            ResultSet resultSet = pst.executeQuery();
            ResultSetMetaData rsmd = resultSet.getMetaData();
            int c = rsmd.getColumnCount();
            DefaultTableModel dftm = (DefaultTableModel)tbl_Data.getModel();
            dftm.setRowCount(0);
            
            while(resultSet.next()){
                
                Vector v2 = new Vector();
                
                for(int i = 0; i <= c; i++){
                    v2.add(resultSet.getInt("ID"));
                    v2.add(resultSet.getString("name"));
                    v2.add(resultSet.getString("baranggay"));
                    v2.add(resultSet.getInt("age"));
                    v2.add(resultSet.getString("sex"));
                     v2.add(resultSet.getString("agecat"));
                    
                }
               
                dftm.addRow(v2);
            }
            
            
          } catch (ClassNotFoundException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(this,ex);
             
        } catch (SQLException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,ex);
            System.out.println(ex);
        }
        
    }
    
      public void showSenior() { //will set the table of data if the age of persons are above 12 and below 18 
          try {
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            Connection connection = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/Alessandro/Informations.accdb");
            PreparedStatement pst = connection.prepareStatement("SELECT * FROM RegisteredData WHERE age >= 60 ORDER BY age ASC");
            
            ResultSet resultSet = pst.executeQuery();
            ResultSetMetaData rsmd = resultSet.getMetaData();
            int c = rsmd.getColumnCount();
            DefaultTableModel dftm = (DefaultTableModel)tbl_Data.getModel();
            dftm.setRowCount(0);
            
            while(resultSet.next()){
                
                Vector v2 = new Vector();
                
                for(int i = 0; i <= c; i++){
                    v2.add(resultSet.getInt("ID"));
                    v2.add(resultSet.getString("name"));
                    v2.add(resultSet.getString("baranggay"));
                    v2.add(resultSet.getInt("age"));
                    v2.add(resultSet.getString("sex"));
                     v2.add(resultSet.getString("agecat"));
                    
                }
               
                dftm.addRow(v2);
            }
            
            
          } catch (ClassNotFoundException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(this,ex);
             
        } catch (SQLException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,ex);
            System.out.println(ex);
        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tbl_Data;
    // End of variables declaration//GEN-END:variables
}
